Russian qt advices советы кути русский по русски рекомендации кутэ

1. Проблема со строковыми классами ```QString``` в целом заключается в том, что они копируют содержимое  char* при их создании. ```QByteArray``` представляет собой последовательность байтов без какой-либо кодировки, поэтому ее можно
рассматривается как эквивалент ```std::string```. Используйте его для хранения байтовых массивов. Его конструкторы будут брать внутренний буфер и копировать его. Если мы хотим избежать этой копии, мы можем использовать функцию ```fromRawData()```,
который будет хранить только указатель на данные, но не станет владельцем.
Вызывающий обьект должен гарантировать, что указанные данные остаются действительными для всего времени жизни ```QByteArray```. Другой возможностью является использование макроса QByteArrayLiteral(). Этот макрос будет
сгенерируйте QByteArray из литерала char* во время компиляции и поместите его в сегмент памяти только для чтения.
2. ```QString``` представляет строку Unicode в кодировке UTF-16 и поддерживает кодировку Unicode. Он неявно используется совместно (подсчет ссылок), и его конструкторы будут выделять
объем памяти один раз. Аналогично ```QByteArray```, если мы хотим сэкономить выделения памяти, мы можем использовать  ```fromRawData()``` функцией или макросом ```QStringLiteral()```.
Существует дополнительный строковый класс под названием ```QLatin1String```, который обеспечивает тонкую оболочку вокруг ASCII-закодированных литералов char*. Он подразумевается как
оптимизация, чтобы избежать построения объекта ```QString```. Однако русская кириллица не поддерживается.Так как этот класс не является строкой Unicode, она будет использовать половину памяти эквивалентного
```QString```.
3.  Qt предоставляет  класс, называемый ```QStringBuilder```, обеспечивающий базовую оптимизацию  для конкатенации ```QString```. Этот класс не предназначен для создания экземпляров
напрямую, но будет автоматически вызываться, когда его перегруженный оператор % используется вместо обычного оператора конкатенации +, как в следующем
пример:
```
QString s1("Привет");
QLatin1String s2 («вы все»);
QString msg = s1 % s2 % "как дела?";
```
3.4343


